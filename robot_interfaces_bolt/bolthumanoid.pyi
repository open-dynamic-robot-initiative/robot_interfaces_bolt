# Auto-generated with `stubgen -m robot_interfaces_bolt.bolthumanoid`
# Needs to be updated manually if there are changes in the cpp module!
#
# Note: stubs for static methods had to be fixed manually.  This might be fixed in
# future versions of mypy, see https://github.com/python/mypy/issues/13574 and
# https://github.com/python/mypy/pull/14934
#
from typing import Any, ClassVar, List

class Action:
    joint_position_gains: Any
    joint_positions: Any
    joint_torques: Any
    joint_velocities: Any
    joint_velocity_gains: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Zero(*args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Backend:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_termination_reason(self, *args, **kwargs) -> Any: ...
    def initialize(self, *args, **kwargs) -> Any: ...
    def is_running(self, *args, **kwargs) -> Any: ...
    def request_shutdown(self, *args, **kwargs) -> Any: ...
    def wait_until_first_action(self, *args, **kwargs) -> Any: ...
    def wait_until_terminated(self, *args, **kwargs) -> Any: ...

class BaseBoltHumanoidDriver:
    def __init__(self, *args, **kwargs) -> None: ...

class BaseData:
    def __init__(self, *args, **kwargs) -> None: ...

class BinaryLogReader:
    def __init__(self, filename: str) -> None: ...
    def read_file(self, filename: str) -> Any: ...
    @property
    def data(self) -> List[LogEntry]: ...

class Config:
    home_offset_rad: Any
    max_motor_current_A: Any
    network_interface: Any
    slider_serial_port: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def from_file(*args, **kwargs) -> Any: ...

class Frontend:
    def __init__(self, *args, **kwargs) -> None: ...
    def append_desired_action(self, *args, **kwargs) -> Any: ...
    def get_applied_action(self, *args, **kwargs) -> Any: ...
    def get_current_timeindex(self, *args, **kwargs) -> Any: ...
    def get_desired_action(self, *args, **kwargs) -> Any: ...
    def get_observation(self, *args, **kwargs) -> Any: ...
    def get_status(self, *args, **kwargs) -> Any: ...
    def get_timestamp_ms(self, *args, **kwargs) -> Any: ...
    def wait_until_timeindex(self, *args, **kwargs) -> Any: ...

class LogEntry:
    applied_action: Any
    desired_action: Any
    observation: Any
    status: Any
    timeindex: Any
    timestamp: Any
    def __init__(self, *args, **kwargs) -> None: ...

class Logger:
    class Format:
        __members__: ClassVar[Any] = ...  # read-only
        BINARY: ClassVar[Logger.Format] = ...
        CSV: ClassVar[Logger.Format] = ...
        CSV_GZIP: ClassVar[Logger.Format] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def __eq__(self, other) -> bool: ...
        def __getstate__(self) -> Any: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __ne__(self, other) -> bool: ...
        def __setstate__(self, state) -> Any: ...
        @property
        def name(self) -> Any: ...
        @property
        def value(self) -> Any: ...

    def __init__(self, *args, **kwargs) -> None: ...
    def _start_continous_writing(self, *args, **kwargs) -> Any: ...
    def _stop_continous_writing(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def save_current_robot_data(self, *args, **kwargs) -> Any: ...
    def save_current_robot_data_binary(self, *args, **kwargs) -> Any: ...
    def start(self, *args, **kwargs) -> Any: ...
    def start_continous_writing(self, *args, **kwargs) -> Any: ...
    def stop(self, *args, **kwargs) -> Any: ...
    def stop_and_save(self, *args, **kwargs) -> Any: ...
    def stop_continous_writing(self, *args, **kwargs) -> Any: ...
    def write_current_buffer(self, *args, **kwargs) -> Any: ...
    def write_current_buffer_binary(self, *args, **kwargs) -> Any: ...

class MultiProcessData(BaseData):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def applied_action(self) -> Any: ...
    @property
    def desired_action(self) -> Any: ...
    @property
    def observation(self) -> Any: ...
    @property
    def status(self) -> Any: ...

class Observation:
    imu_accelerometer: Any
    imu_attitude: Any
    imu_gyroscope: Any
    imu_linear_acceleration: Any
    joint_positions: Any
    joint_target_torques: Any
    joint_torques: Any
    joint_velocities: Any
    slider_positions: Any
    def __init__(self, *args, **kwargs) -> None: ...

class PyBulletDriver(BaseBoltHumanoidDriver):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_bullet_env(self, *args, **kwargs) -> Any: ...

class SingleProcessData(BaseData):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def applied_action(self) -> Any: ...
    @property
    def desired_action(self) -> Any: ...
    @property
    def observation(self) -> Any: ...
    @property
    def status(self) -> Any: ...

class _ActionMultiProcessTimeSeries:
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def count_appended_elements(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def has_changed_since_tag(self, *args, **kwargs) -> Any: ...
    def is_empty(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def max_length(self, *args, **kwargs) -> Any: ...
    def newest_element(self, *args, **kwargs) -> Any: ...
    def newest_timeindex(self, *args, **kwargs) -> Any: ...
    def oldest_timeindex(self, *args, **kwargs) -> Any: ...
    def tag(self, *args, **kwargs) -> Any: ...
    def tagged_timeindex(self, *args, **kwargs) -> Any: ...
    def timestamp_ms(self, *args, **kwargs) -> Any: ...
    def timestamp_s(self, *args, **kwargs) -> Any: ...
    def wait_for_timeindex(self, *args, **kwargs) -> Any: ...

class _ActionTimeSeries:
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def count_appended_elements(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def has_changed_since_tag(self, *args, **kwargs) -> Any: ...
    def is_empty(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def max_length(self, *args, **kwargs) -> Any: ...
    def newest_element(self, *args, **kwargs) -> Any: ...
    def newest_timeindex(self, *args, **kwargs) -> Any: ...
    def oldest_timeindex(self, *args, **kwargs) -> Any: ...
    def tag(self, *args, **kwargs) -> Any: ...
    def tagged_timeindex(self, *args, **kwargs) -> Any: ...
    def timestamp_ms(self, *args, **kwargs) -> Any: ...
    def timestamp_s(self, *args, **kwargs) -> Any: ...
    def wait_for_timeindex(self, *args, **kwargs) -> Any: ...

class _ObservationMultiProcessTimeSeries:
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def count_appended_elements(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def has_changed_since_tag(self, *args, **kwargs) -> Any: ...
    def is_empty(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def max_length(self, *args, **kwargs) -> Any: ...
    def newest_element(self, *args, **kwargs) -> Any: ...
    def newest_timeindex(self, *args, **kwargs) -> Any: ...
    def oldest_timeindex(self, *args, **kwargs) -> Any: ...
    def tag(self, *args, **kwargs) -> Any: ...
    def tagged_timeindex(self, *args, **kwargs) -> Any: ...
    def timestamp_ms(self, *args, **kwargs) -> Any: ...
    def timestamp_s(self, *args, **kwargs) -> Any: ...
    def wait_for_timeindex(self, *args, **kwargs) -> Any: ...

class _ObservationTimeSeries:
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def count_appended_elements(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def has_changed_since_tag(self, *args, **kwargs) -> Any: ...
    def is_empty(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def max_length(self, *args, **kwargs) -> Any: ...
    def newest_element(self, *args, **kwargs) -> Any: ...
    def newest_timeindex(self, *args, **kwargs) -> Any: ...
    def oldest_timeindex(self, *args, **kwargs) -> Any: ...
    def tag(self, *args, **kwargs) -> Any: ...
    def tagged_timeindex(self, *args, **kwargs) -> Any: ...
    def timestamp_ms(self, *args, **kwargs) -> Any: ...
    def timestamp_s(self, *args, **kwargs) -> Any: ...
    def wait_for_timeindex(self, *args, **kwargs) -> Any: ...

def clear_memory(*args, **kwargs) -> Any: ...
def create_backend(*args, **kwargs) -> Any: ...
def create_fake_backend(*args, **kwargs) -> Any: ...
def create_follower__ActionMultiProcessTimeSeries(*args, **kwargs) -> Any: ...
def create_follower__ObservationMultiProcessTimeSeries(*args, **kwargs) -> Any: ...
def create_leader__ActionMultiProcessTimeSeries(*args, **kwargs) -> Any: ...
def create_leader__ObservationMultiProcessTimeSeries(*args, **kwargs) -> Any: ...
def create_pybullet_backend(*args, **kwargs) -> Any: ...
def create_real_backend(*args, **kwargs) -> Any: ...
